import numpy as npimport matplotlib.pyplot as pltimport seaborn as snsimport cv2from PIL import Imageimport tensorflow as tftf.random.set_seed(3)from tensorflow import kerasfrom keras.datasets import mnistfrom tensorflow.math import confusion_matrix(X_train, Y_train), (X_test, Y_test) =  mnist.load_data()# scaling the valuesX_train = X_train/255X_test = X_test/255# setting up the layers of the Neural  Networkmodel = keras.Sequential([    keras.layers.Flatten(input_shape=(28,28)),    keras.layers.Dense(50, activation='relu'),    keras.layers.Dense(50, activation='relu'),    keras.layers.Dense(10, activation='sigmoid')])# compiling the Neural Networkmodel.compile(optimizer='adam',              loss = 'sparse_categorical_crossentropy',              metrics=['accuracy'])# training the Neural Networkmodel.fit(X_train, Y_train, epochs=10)loss, accuracy = model.evaluate(X_test, Y_test)print(accuracy)Y_pred = model.predict(X_test)# converting the prediction probabilities to class label for all test data pointsY_pred_labels = [np.argmax(i) for i in Y_pred]conf_mat = confusion_matrix(Y_test, Y_pred_labels)plt.figure(figsize=(15,7))sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')plt.ylabel('True Labels')plt.xlabel('Predicted Labels')plt.show()